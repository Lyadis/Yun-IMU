
/***************************************************************************** 
 * File generated from ThingML (Do not edit this file) 
 *****************************************************************************/


/*****************************************************************************
 * Definition of simple types and enumerations
 *****************************************************************************/

// Definition of Enumeration  DigitalState
#define DIGITALSTATE_LOW 0
#define DIGITALSTATE_HIGH 1

// Definition of Enumeration  DigitalState
#define DIGITALSTATE_LOW 0
#define DIGITALSTATE_HIGH 1

/*****************************************************************************
 * Headers for type : ArduinoScheduler
 *****************************************************************************/


// BEGIN: Code from the c_header annotation ArduinoScheduler

#define NB_SOFT_TIMERS 4 // for 4 different timers, 0 to 3. change here to get more or less timers.

// END: Code from the c_header annotation ArduinoScheduler

// Definition of the instance stuct:
struct ArduinoScheduler_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int ArduinoScheduler_ArduinoSchedulerStateChart_State;
// Variables for the properties of the instance
uint8_t ArduinoScheduler_interrupt_counter__var;
long ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[NB_SOFT_TIMERS];
long ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var;
};

// Declaration of prototypes outgoing messages:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(int state, struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_polling_setup(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_polling_poll(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_arduino_setOutput(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_timer_cancel(struct ArduinoScheduler_Instance *_instance, uint8_t id);
void ArduinoScheduler_handle_arduino_setDigitalLow(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_serial_print_str(struct ArduinoScheduler_Instance *_instance, char * msg);
void ArduinoScheduler_handle_arduino_timer_start(struct ArduinoScheduler_Instance *_instance, uint8_t id, int16_t time);
void ArduinoScheduler_handle_arduino_serial_print_dec(struct ArduinoScheduler_Instance *_instance, double num);
void ArduinoScheduler_handle_arduino_readAnalog(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_usb_print_str(struct ArduinoScheduler_Instance *_instance, char * msg);
void ArduinoScheduler_handle_arduino_serial_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num);
void ArduinoScheduler_handle_arduino_usb_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num);
void ArduinoScheduler_handle_arduino_setInput(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_setDigitalHigh(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_usb_print_dec(struct ArduinoScheduler_Instance *_instance, double num);
void ArduinoScheduler_handle_arduino_readDigital(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
// Declaration of callbacks for incomming messages:
void register_ArduinoScheduler_send_arduino_ready_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_1s_poll_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_timeout_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t));
void register_ArduinoScheduler_send_arduino_serial_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char));
void register_ArduinoScheduler_send_arduino_usb_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char));
void register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t));
void register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, int));
void register_ArduinoScheduler_send_Serial1_Measure_listener(void (*_listener)(struct ArduinoScheduler_Instance*, float));

// Definition of the states:
#define ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE 0
#define ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE 1

/*****************************************************************************
 * Implementation for type : ArduinoScheduler
 *****************************************************************************/


// BEGIN: Code from the c_global annotation ArduinoScheduler

struct ArduinoScheduler_Instance *_ArduinoScheduler_Instance;
uint8_t interrupt_counter = 0;

// END: Code from the c_global annotation ArduinoScheduler

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(int state, struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id);
void ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c);
void ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c);
void ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState);
void ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res);
void ArduinoScheduler_send_Serial1_Measure(struct ArduinoScheduler_Instance *_instance, float m);
void f_ArduinoScheduler_initialize_timer3(struct ArduinoScheduler_Instance *_instance);
SIGNAL(TIMER3_OVF_vect);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:
// Definition of function initialize_timer3
void f_ArduinoScheduler_initialize_timer3(struct ArduinoScheduler_Instance *_instance) {
{
// Store the instance in a global variable so that the interrupt routine can use it
		_ArduinoScheduler_Instance = _instance;
		// Run timer3 interrupt up counting at 16MHz
		TCCR3A = 0;
		TCCR3B = 0<<CS32 | 0<<CS31 | 1<<CS30;
		//Timer3 Overflow Interrupt Enable
		TIMSK3 |= 1<<TOIE3;
}
}

// Definition of function timer3_compare_interrupt
SIGNAL(TIMER3_OVF_vect) {
{
TCNT3 = 1535;
interrupt_counter++;
if(interrupt_counter >= 24) {
ArduinoScheduler_send_arduino_100ms_interrupt(_ArduinoScheduler_Instance);
interrupt_counter=0;
}
ArduinoScheduler_send_arduino_4ms_interrupt(_ArduinoScheduler_Instance);
}
}


// On Entry Actions:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(int state, struct ArduinoScheduler_Instance *_instance) {
switch(state) {
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE:
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State = ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE;
{
Serial.begin(9600);
}
ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State, _instance);
break;
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE:
break;
default: break;
}
}

// On Exit Actions:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(int state, struct ArduinoScheduler_Instance *_instance) {
switch(state) {
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE:
ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State, _instance);
break;
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:
void ArduinoScheduler_handle_polling_setup(struct ArduinoScheduler_Instance *_instance) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
f_ArduinoScheduler_initialize_timer3(_instance);
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var = millis() + 1000;
ArduinoScheduler_send_arduino_ready(_instance);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_polling_poll(struct ArduinoScheduler_Instance *_instance) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
long tms = millis();
uint8_t t = 0;
while(t < NB_SOFT_TIMERS) {
if(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] > 0 && _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] < tms) {
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] = 0;
ArduinoScheduler_send_arduino_timeout(_instance, t);
}
t = t + 1;
}
if(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var < tms) {
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var = _instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var + 1000;
ArduinoScheduler_send_arduino_1s_poll(_instance);
}
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setOutput(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
pinMode(pin,OUTPUT);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_timer_cancel(struct ArduinoScheduler_Instance *_instance, uint8_t id) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if(id < NB_SOFT_TIMERS) _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[id] = 0;
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setDigitalLow(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
digitalWrite(pin, LOW);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_str(struct ArduinoScheduler_Instance *_instance, char * msg) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(msg);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_timer_start(struct ArduinoScheduler_Instance *_instance, uint8_t id, int16_t time) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if(id < NB_SOFT_TIMERS) _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[id] = millis() + time - 1;
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_dec(struct ArduinoScheduler_Instance *_instance, double num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_readAnalog(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
ArduinoScheduler_send_arduino_readAnalogResponse(_instance, pin, analogRead(pin));
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_str(struct ArduinoScheduler_Instance *_instance, char * msg) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(msg);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setInput(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
pinMode(pin,INPUT);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setDigitalHigh(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
digitalWrite(pin, HIGH);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_dec(struct ArduinoScheduler_Instance *_instance, double num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_readDigital(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if((digitalRead(pin) == HIGH)) {
ArduinoScheduler_send_arduino_readDigitalResponse(_instance, pin, DIGITALSTATE_HIGH);
}
if((digitalRead(pin) == LOW)) {
ArduinoScheduler_send_arduino_readDigitalResponse(_instance, pin, DIGITALSTATE_LOW);
}
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}

// Observers for outgoing messages:
void (*ArduinoScheduler_send_arduino_ready_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_ready_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_ready_listener = _listener;
}
void ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_ready_listener != 0x0) ArduinoScheduler_send_arduino_ready_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_4ms_interrupt_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_4ms_interrupt_listener = _listener;
}
void ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_4ms_interrupt_listener != 0x0) ArduinoScheduler_send_arduino_4ms_interrupt_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_100ms_interrupt_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_100ms_interrupt_listener = _listener;
}
void ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_100ms_interrupt_listener != 0x0) ArduinoScheduler_send_arduino_100ms_interrupt_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_1s_poll_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_1s_poll_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_1s_poll_listener = _listener;
}
void ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_1s_poll_listener != 0x0) ArduinoScheduler_send_arduino_1s_poll_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_timeout_listener)(struct ArduinoScheduler_Instance*, uint8_t)= 0x0;
void register_ArduinoScheduler_send_arduino_timeout_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t)){
ArduinoScheduler_send_arduino_timeout_listener = _listener;
}
void ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id){
if (ArduinoScheduler_send_arduino_timeout_listener != 0x0) ArduinoScheduler_send_arduino_timeout_listener(_instance, id);
}
void (*ArduinoScheduler_send_arduino_serial_rx_char_listener)(struct ArduinoScheduler_Instance*, char)= 0x0;
void register_ArduinoScheduler_send_arduino_serial_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char)){
ArduinoScheduler_send_arduino_serial_rx_char_listener = _listener;
}
void ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (ArduinoScheduler_send_arduino_serial_rx_char_listener != 0x0) ArduinoScheduler_send_arduino_serial_rx_char_listener(_instance, c);
}
void (*ArduinoScheduler_send_arduino_usb_rx_char_listener)(struct ArduinoScheduler_Instance*, char)= 0x0;
void register_ArduinoScheduler_send_arduino_usb_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char)){
ArduinoScheduler_send_arduino_usb_rx_char_listener = _listener;
}
void ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (ArduinoScheduler_send_arduino_usb_rx_char_listener != 0x0) ArduinoScheduler_send_arduino_usb_rx_char_listener(_instance, c);
}
void (*ArduinoScheduler_send_arduino_readDigitalResponse_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t)= 0x0;
void register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t)){
ArduinoScheduler_send_arduino_readDigitalResponse_listener = _listener;
}
void ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState){
if (ArduinoScheduler_send_arduino_readDigitalResponse_listener != 0x0) ArduinoScheduler_send_arduino_readDigitalResponse_listener(_instance, pin, DigitalState);
}
void (*ArduinoScheduler_send_arduino_readAnalogResponse_listener)(struct ArduinoScheduler_Instance*, uint8_t, int)= 0x0;
void register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, int)){
ArduinoScheduler_send_arduino_readAnalogResponse_listener = _listener;
}
void ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res){
if (ArduinoScheduler_send_arduino_readAnalogResponse_listener != 0x0) ArduinoScheduler_send_arduino_readAnalogResponse_listener(_instance, pin, res);
}
void (*ArduinoScheduler_send_Serial1_Measure_listener)(struct ArduinoScheduler_Instance*, float)= 0x0;
void register_ArduinoScheduler_send_Serial1_Measure_listener(void (*_listener)(struct ArduinoScheduler_Instance*, float)){
ArduinoScheduler_send_Serial1_Measure_listener = _listener;
}
void ArduinoScheduler_send_Serial1_Measure(struct ArduinoScheduler_Instance *_instance, float m){
if (ArduinoScheduler_send_Serial1_Measure_listener != 0x0) ArduinoScheduler_send_Serial1_Measure_listener(_instance, m);
}

/*****************************************************************************
 * Headers for type : IMUController
 *****************************************************************************/

// Definition of the instance stuct:
struct IMUController_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int IMUController_IMUCCrt_State;
// Variables for the properties of the instance
uint8_t IMUController_led1__var;
uint8_t IMUController_led2__var;
uint8_t IMUController_IMU__var;
uint8_t IMUController_led1On__var;
};

// Declaration of prototypes outgoing messages:
void IMUController_IMUCCrt_OnEntry(int state, struct IMUController_Instance *_instance);
void IMUController_handle_Serial1_CommandStart(struct IMUController_Instance *_instance);
void IMUController_handle_Serial1_CommandStop(struct IMUController_Instance *_instance);
void IMUController_handle_arduino_ready(struct IMUController_Instance *_instance);
void IMUController_handle_arduino_100ms_interrupt(struct IMUController_Instance *_instance);
// Declaration of callbacks for incomming messages:
void register_IMUController_send_arduino_timer_start_listener(void (*_listener)(struct IMUController_Instance*, uint8_t, int16_t));
void register_IMUController_send_arduino_timer_cancel_listener(void (*_listener)(struct IMUController_Instance*, uint8_t));
void register_IMUController_send_arduino_serial_print_str_listener(void (*_listener)(struct IMUController_Instance*, char *));
void register_IMUController_send_arduino_serial_print_dec_listener(void (*_listener)(struct IMUController_Instance*, double));
void register_IMUController_send_arduino_serial_print_num_listener(void (*_listener)(struct IMUController_Instance*, int16_t));
void register_IMUController_send_arduino_usb_print_str_listener(void (*_listener)(struct IMUController_Instance*, char *));
void register_IMUController_send_arduino_usb_print_dec_listener(void (*_listener)(struct IMUController_Instance*, double));
void register_IMUController_send_arduino_usb_print_num_listener(void (*_listener)(struct IMUController_Instance*, int16_t));
void register_IMUController_send_arduino_setDigitalHigh_listener(void (*_listener)(struct IMUController_Instance*, uint8_t));
void register_IMUController_send_arduino_setDigitalLow_listener(void (*_listener)(struct IMUController_Instance*, uint8_t));
void register_IMUController_send_arduino_setOutput_listener(void (*_listener)(struct IMUController_Instance*, uint8_t));
void register_IMUController_send_arduino_setInput_listener(void (*_listener)(struct IMUController_Instance*, uint8_t));
void register_IMUController_send_arduino_readDigital_listener(void (*_listener)(struct IMUController_Instance*, uint8_t));
void register_IMUController_send_arduino_readAnalog_listener(void (*_listener)(struct IMUController_Instance*, uint8_t));
void register_IMUController_send_Serial1_Measure_listener(void (*_listener)(struct IMUController_Instance*, float));

// Definition of the states:
#define IMUCONTROLLER_IMUCCRT_STATE 0
#define IMUCONTROLLER_IMUCCRT_INIT_STATE 1
#define IMUCONTROLLER_IMUCCRT_SETUP_STATE 2
#define IMUCONTROLLER_IMUCCRT_LOOP_STATE 3

/*****************************************************************************
 * Implementation for type : IMUController
 *****************************************************************************/

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void IMUController_IMUCCrt_OnExit(int state, struct IMUController_Instance *_instance);
void IMUController_send_arduino_timer_start(struct IMUController_Instance *_instance, uint8_t id, int16_t time);
void IMUController_send_arduino_timer_cancel(struct IMUController_Instance *_instance, uint8_t id);
void IMUController_send_arduino_serial_print_str(struct IMUController_Instance *_instance, char * msg);
void IMUController_send_arduino_serial_print_dec(struct IMUController_Instance *_instance, double num);
void IMUController_send_arduino_serial_print_num(struct IMUController_Instance *_instance, int16_t num);
void IMUController_send_arduino_usb_print_str(struct IMUController_Instance *_instance, char * msg);
void IMUController_send_arduino_usb_print_dec(struct IMUController_Instance *_instance, double num);
void IMUController_send_arduino_usb_print_num(struct IMUController_Instance *_instance, int16_t num);
void IMUController_send_arduino_setDigitalHigh(struct IMUController_Instance *_instance, uint8_t pin);
void IMUController_send_arduino_setDigitalLow(struct IMUController_Instance *_instance, uint8_t pin);
void IMUController_send_arduino_setOutput(struct IMUController_Instance *_instance, uint8_t pin);
void IMUController_send_arduino_setInput(struct IMUController_Instance *_instance, uint8_t pin);
void IMUController_send_arduino_readDigital(struct IMUController_Instance *_instance, uint8_t pin);
void IMUController_send_arduino_readAnalog(struct IMUController_Instance *_instance, uint8_t pin);
void IMUController_send_Serial1_Measure(struct IMUController_Instance *_instance, float m);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:

// On Entry Actions:
void IMUController_IMUCCrt_OnEntry(int state, struct IMUController_Instance *_instance) {
switch(state) {
case IMUCONTROLLER_IMUCCRT_STATE:
_instance->IMUController_IMUCCrt_State = IMUCONTROLLER_IMUCCRT_INIT_STATE;
IMUController_IMUCCrt_OnEntry(_instance->IMUController_IMUCCrt_State, _instance);
break;
case IMUCONTROLLER_IMUCCRT_INIT_STATE:
break;
case IMUCONTROLLER_IMUCCRT_SETUP_STATE:
{
IMUController_send_arduino_setOutput(_instance, _instance->IMUController_led1__var);
IMUController_send_arduino_setOutput(_instance, _instance->IMUController_led2__var);
IMUController_send_arduino_setDigitalHigh(_instance, _instance->IMUController_led2__var);
}
break;
case IMUCONTROLLER_IMUCCRT_LOOP_STATE:
{
float f = (float) analogRead(_instance->IMUController_IMU__var);
if((f < 512) && ( !(_instance->IMUController_led1On__var))) {
IMUController_send_arduino_setDigitalHigh(_instance, _instance->IMUController_led2__var);
_instance->IMUController_led1On__var = 1;
}
if( !(f < 512) && (_instance->IMUController_led1On__var)) {
IMUController_send_arduino_setDigitalLow(_instance, _instance->IMUController_led2__var);
_instance->IMUController_led1On__var = 0;
}
IMUController_send_Serial1_Measure(_instance, f);
}
break;
default: break;
}
}

// On Exit Actions:
void IMUController_IMUCCrt_OnExit(int state, struct IMUController_Instance *_instance) {
switch(state) {
case IMUCONTROLLER_IMUCCRT_STATE:
IMUController_IMUCCrt_OnExit(_instance->IMUController_IMUCCrt_State, _instance);
break;
case IMUCONTROLLER_IMUCCRT_INIT_STATE:
break;
case IMUCONTROLLER_IMUCCRT_SETUP_STATE:
break;
case IMUCONTROLLER_IMUCCRT_LOOP_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:
void IMUController_handle_Serial1_CommandStart(struct IMUController_Instance *_instance) {
uint8_t IMUController_IMUCCrt_State_event_consumed = 0;
if (_instance->IMUController_IMUCCrt_State == IMUCONTROLLER_IMUCCRT_LOOP_STATE) {
if (IMUController_IMUCCrt_State_event_consumed == 0 && 1) {
{
IMUController_send_arduino_setDigitalHigh(_instance, _instance->IMUController_led2__var);
}
IMUController_IMUCCrt_State_event_consumed = 1;
}
}
}
void IMUController_handle_Serial1_CommandStop(struct IMUController_Instance *_instance) {
uint8_t IMUController_IMUCCrt_State_event_consumed = 0;
if (_instance->IMUController_IMUCCrt_State == IMUCONTROLLER_IMUCCRT_LOOP_STATE) {
if (IMUController_IMUCCrt_State_event_consumed == 0 && 1) {
{
IMUController_send_arduino_setDigitalLow(_instance, _instance->IMUController_led2__var);
}
IMUController_IMUCCrt_State_event_consumed = 1;
}
}
}
void IMUController_handle_arduino_ready(struct IMUController_Instance *_instance) {
uint8_t IMUController_IMUCCrt_State_event_consumed = 0;
if (_instance->IMUController_IMUCCrt_State == IMUCONTROLLER_IMUCCRT_INIT_STATE) {
if (IMUController_IMUCCrt_State_event_consumed == 0 && 1) {
IMUController_IMUCCrt_OnExit(IMUCONTROLLER_IMUCCRT_INIT_STATE, _instance);
_instance->IMUController_IMUCCrt_State = IMUCONTROLLER_IMUCCRT_SETUP_STATE;
IMUController_IMUCCrt_OnEntry(IMUCONTROLLER_IMUCCRT_SETUP_STATE, _instance);
IMUController_IMUCCrt_State_event_consumed = 1;
}
}
}
void IMUController_handle_arduino_100ms_interrupt(struct IMUController_Instance *_instance) {
uint8_t IMUController_IMUCCrt_State_event_consumed = 0;
if (_instance->IMUController_IMUCCrt_State == IMUCONTROLLER_IMUCCRT_LOOP_STATE) {
if (IMUController_IMUCCrt_State_event_consumed == 0 && 1) {
IMUController_IMUCCrt_OnExit(IMUCONTROLLER_IMUCCRT_LOOP_STATE, _instance);
_instance->IMUController_IMUCCrt_State = IMUCONTROLLER_IMUCCRT_LOOP_STATE;
IMUController_IMUCCrt_OnEntry(IMUCONTROLLER_IMUCCRT_LOOP_STATE, _instance);
IMUController_IMUCCrt_State_event_consumed = 1;
}
}
}
void IMUController_handle_empty_event(struct IMUController_Instance *_instance) {
if (_instance->IMUController_IMUCCrt_State == IMUCONTROLLER_IMUCCRT_SETUP_STATE) {
if (1) {
IMUController_IMUCCrt_OnExit(IMUCONTROLLER_IMUCCRT_SETUP_STATE, _instance);
_instance->IMUController_IMUCCrt_State = IMUCONTROLLER_IMUCCRT_LOOP_STATE;
IMUController_IMUCCrt_OnEntry(IMUCONTROLLER_IMUCCRT_LOOP_STATE, _instance);
}
}
}

// Observers for outgoing messages:
void (*IMUController_send_arduino_timer_start_listener)(struct IMUController_Instance*, uint8_t, int16_t)= 0x0;
void register_IMUController_send_arduino_timer_start_listener(void (*_listener)(struct IMUController_Instance*, uint8_t, int16_t)){
IMUController_send_arduino_timer_start_listener = _listener;
}
void IMUController_send_arduino_timer_start(struct IMUController_Instance *_instance, uint8_t id, int16_t time){
if (IMUController_send_arduino_timer_start_listener != 0x0) IMUController_send_arduino_timer_start_listener(_instance, id, time);
}
void (*IMUController_send_arduino_timer_cancel_listener)(struct IMUController_Instance*, uint8_t)= 0x0;
void register_IMUController_send_arduino_timer_cancel_listener(void (*_listener)(struct IMUController_Instance*, uint8_t)){
IMUController_send_arduino_timer_cancel_listener = _listener;
}
void IMUController_send_arduino_timer_cancel(struct IMUController_Instance *_instance, uint8_t id){
if (IMUController_send_arduino_timer_cancel_listener != 0x0) IMUController_send_arduino_timer_cancel_listener(_instance, id);
}
void (*IMUController_send_arduino_serial_print_str_listener)(struct IMUController_Instance*, char *)= 0x0;
void register_IMUController_send_arduino_serial_print_str_listener(void (*_listener)(struct IMUController_Instance*, char *)){
IMUController_send_arduino_serial_print_str_listener = _listener;
}
void IMUController_send_arduino_serial_print_str(struct IMUController_Instance *_instance, char * msg){
if (IMUController_send_arduino_serial_print_str_listener != 0x0) IMUController_send_arduino_serial_print_str_listener(_instance, msg);
}
void (*IMUController_send_arduino_serial_print_dec_listener)(struct IMUController_Instance*, double)= 0x0;
void register_IMUController_send_arduino_serial_print_dec_listener(void (*_listener)(struct IMUController_Instance*, double)){
IMUController_send_arduino_serial_print_dec_listener = _listener;
}
void IMUController_send_arduino_serial_print_dec(struct IMUController_Instance *_instance, double num){
if (IMUController_send_arduino_serial_print_dec_listener != 0x0) IMUController_send_arduino_serial_print_dec_listener(_instance, num);
}
void (*IMUController_send_arduino_serial_print_num_listener)(struct IMUController_Instance*, int16_t)= 0x0;
void register_IMUController_send_arduino_serial_print_num_listener(void (*_listener)(struct IMUController_Instance*, int16_t)){
IMUController_send_arduino_serial_print_num_listener = _listener;
}
void IMUController_send_arduino_serial_print_num(struct IMUController_Instance *_instance, int16_t num){
if (IMUController_send_arduino_serial_print_num_listener != 0x0) IMUController_send_arduino_serial_print_num_listener(_instance, num);
}
void (*IMUController_send_arduino_usb_print_str_listener)(struct IMUController_Instance*, char *)= 0x0;
void register_IMUController_send_arduino_usb_print_str_listener(void (*_listener)(struct IMUController_Instance*, char *)){
IMUController_send_arduino_usb_print_str_listener = _listener;
}
void IMUController_send_arduino_usb_print_str(struct IMUController_Instance *_instance, char * msg){
if (IMUController_send_arduino_usb_print_str_listener != 0x0) IMUController_send_arduino_usb_print_str_listener(_instance, msg);
}
void (*IMUController_send_arduino_usb_print_dec_listener)(struct IMUController_Instance*, double)= 0x0;
void register_IMUController_send_arduino_usb_print_dec_listener(void (*_listener)(struct IMUController_Instance*, double)){
IMUController_send_arduino_usb_print_dec_listener = _listener;
}
void IMUController_send_arduino_usb_print_dec(struct IMUController_Instance *_instance, double num){
if (IMUController_send_arduino_usb_print_dec_listener != 0x0) IMUController_send_arduino_usb_print_dec_listener(_instance, num);
}
void (*IMUController_send_arduino_usb_print_num_listener)(struct IMUController_Instance*, int16_t)= 0x0;
void register_IMUController_send_arduino_usb_print_num_listener(void (*_listener)(struct IMUController_Instance*, int16_t)){
IMUController_send_arduino_usb_print_num_listener = _listener;
}
void IMUController_send_arduino_usb_print_num(struct IMUController_Instance *_instance, int16_t num){
if (IMUController_send_arduino_usb_print_num_listener != 0x0) IMUController_send_arduino_usb_print_num_listener(_instance, num);
}
void (*IMUController_send_arduino_setDigitalHigh_listener)(struct IMUController_Instance*, uint8_t)= 0x0;
void register_IMUController_send_arduino_setDigitalHigh_listener(void (*_listener)(struct IMUController_Instance*, uint8_t)){
IMUController_send_arduino_setDigitalHigh_listener = _listener;
}
void IMUController_send_arduino_setDigitalHigh(struct IMUController_Instance *_instance, uint8_t pin){
if (IMUController_send_arduino_setDigitalHigh_listener != 0x0) IMUController_send_arduino_setDigitalHigh_listener(_instance, pin);
}
void (*IMUController_send_arduino_setDigitalLow_listener)(struct IMUController_Instance*, uint8_t)= 0x0;
void register_IMUController_send_arduino_setDigitalLow_listener(void (*_listener)(struct IMUController_Instance*, uint8_t)){
IMUController_send_arduino_setDigitalLow_listener = _listener;
}
void IMUController_send_arduino_setDigitalLow(struct IMUController_Instance *_instance, uint8_t pin){
if (IMUController_send_arduino_setDigitalLow_listener != 0x0) IMUController_send_arduino_setDigitalLow_listener(_instance, pin);
}
void (*IMUController_send_arduino_setOutput_listener)(struct IMUController_Instance*, uint8_t)= 0x0;
void register_IMUController_send_arduino_setOutput_listener(void (*_listener)(struct IMUController_Instance*, uint8_t)){
IMUController_send_arduino_setOutput_listener = _listener;
}
void IMUController_send_arduino_setOutput(struct IMUController_Instance *_instance, uint8_t pin){
if (IMUController_send_arduino_setOutput_listener != 0x0) IMUController_send_arduino_setOutput_listener(_instance, pin);
}
void (*IMUController_send_arduino_setInput_listener)(struct IMUController_Instance*, uint8_t)= 0x0;
void register_IMUController_send_arduino_setInput_listener(void (*_listener)(struct IMUController_Instance*, uint8_t)){
IMUController_send_arduino_setInput_listener = _listener;
}
void IMUController_send_arduino_setInput(struct IMUController_Instance *_instance, uint8_t pin){
if (IMUController_send_arduino_setInput_listener != 0x0) IMUController_send_arduino_setInput_listener(_instance, pin);
}
void (*IMUController_send_arduino_readDigital_listener)(struct IMUController_Instance*, uint8_t)= 0x0;
void register_IMUController_send_arduino_readDigital_listener(void (*_listener)(struct IMUController_Instance*, uint8_t)){
IMUController_send_arduino_readDigital_listener = _listener;
}
void IMUController_send_arduino_readDigital(struct IMUController_Instance *_instance, uint8_t pin){
if (IMUController_send_arduino_readDigital_listener != 0x0) IMUController_send_arduino_readDigital_listener(_instance, pin);
}
void (*IMUController_send_arduino_readAnalog_listener)(struct IMUController_Instance*, uint8_t)= 0x0;
void register_IMUController_send_arduino_readAnalog_listener(void (*_listener)(struct IMUController_Instance*, uint8_t)){
IMUController_send_arduino_readAnalog_listener = _listener;
}
void IMUController_send_arduino_readAnalog(struct IMUController_Instance *_instance, uint8_t pin){
if (IMUController_send_arduino_readAnalog_listener != 0x0) IMUController_send_arduino_readAnalog_listener(_instance, pin);
}
void (*IMUController_send_Serial1_Measure_listener)(struct IMUController_Instance*, float)= 0x0;
void register_IMUController_send_Serial1_Measure_listener(void (*_listener)(struct IMUController_Instance*, float)){
IMUController_send_Serial1_Measure_listener = _listener;
}
void IMUController_send_Serial1_Measure(struct IMUController_Instance *_instance, float m){
if (IMUController_send_Serial1_Measure_listener != 0x0) IMUController_send_Serial1_Measure_listener(_instance, m);
}

/*****************************************************************************
 * Headers for type : Bridge
 *****************************************************************************/


// BEGIN: Code from the c_header annotation Bridge

#include <SoftwareSerial.h>
#include "/home/sintef/Documents/ArduinoSerialForward/YunBridge/ArduinoSerialForward.h" 
// END: Code from the c_header annotation Bridge

// Definition of the instance stuct:
struct Bridge_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int Bridge_BridgeChart_State;
// Variables for the properties of the instance
};

// Declaration of prototypes outgoing messages:
void Bridge_BridgeChart_OnEntry(int state, struct Bridge_Instance *_instance);
// Declaration of callbacks for incomming messages:
void register_Bridge_send_Serial1_CommandStop_listener(void (*_listener)(struct Bridge_Instance*));
void register_Bridge_send_Serial1_CommandStart_listener(void (*_listener)(struct Bridge_Instance*));

// Definition of the states:
#define BRIDGE_BRIDGECHART_STATE 0
#define BRIDGE_BRIDGECHART_INIT_STATE 1

/*****************************************************************************
 * Implementation for type : Bridge
 *****************************************************************************/

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void Bridge_BridgeChart_OnExit(int state, struct Bridge_Instance *_instance);
void Bridge_send_Serial1_CommandStop(struct Bridge_Instance *_instance);
void Bridge_send_Serial1_CommandStart(struct Bridge_Instance *_instance);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:

// On Entry Actions:
void Bridge_BridgeChart_OnEntry(int state, struct Bridge_Instance *_instance) {
switch(state) {
case BRIDGE_BRIDGECHART_STATE:
_instance->Bridge_BridgeChart_State = BRIDGE_BRIDGECHART_INIT_STATE;
Bridge_BridgeChart_OnEntry(_instance->Bridge_BridgeChart_State, _instance);
break;
case BRIDGE_BRIDGECHART_INIT_STATE:
break;
default: break;
}
}

// On Exit Actions:
void Bridge_BridgeChart_OnExit(int state, struct Bridge_Instance *_instance) {
switch(state) {
case BRIDGE_BRIDGECHART_STATE:
Bridge_BridgeChart_OnExit(_instance->Bridge_BridgeChart_State, _instance);
break;
case BRIDGE_BRIDGECHART_INIT_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:

// Observers for outgoing messages:
void (*Bridge_send_Serial1_CommandStop_listener)(struct Bridge_Instance*)= 0x0;
void register_Bridge_send_Serial1_CommandStop_listener(void (*_listener)(struct Bridge_Instance*)){
Bridge_send_Serial1_CommandStop_listener = _listener;
}
void Bridge_send_Serial1_CommandStop(struct Bridge_Instance *_instance){
if (Bridge_send_Serial1_CommandStop_listener != 0x0) Bridge_send_Serial1_CommandStop_listener(_instance);
}
void (*Bridge_send_Serial1_CommandStart_listener)(struct Bridge_Instance*)= 0x0;
void register_Bridge_send_Serial1_CommandStart_listener(void (*_listener)(struct Bridge_Instance*)){
Bridge_send_Serial1_CommandStart_listener = _listener;
}
void Bridge_send_Serial1_CommandStart(struct Bridge_Instance *_instance){
if (Bridge_send_Serial1_CommandStart_listener != 0x0) Bridge_send_Serial1_CommandStart_listener(_instance);
}


/*****************************************************************************
 * Definitions for configuration : MainMCCfg
 *****************************************************************************/

#define MAX_INSTANCES 32
#define FIFO_SIZE 256

/*********************************
 * Instance IDs and lookup
 *********************************/

void * instances[MAX_INSTANCES];
uint16_t instances_count = 0;

void * instance_by_id(uint16_t id) {
  return instances[id];
}

uint16_t add_instance(void * instance_struct) {
  instances[instances_count] = instance_struct;
  return instances_count++;
}

/******************************************
 * Simple byte FIFO implementation
 ******************************************/

byte fifo[FIFO_SIZE];
int fifo_head = 0;
int fifo_tail = 0;

// Returns the number of byte currently in the fifo
int fifo_byte_length() {
  if (fifo_tail >= fifo_head)
    return fifo_tail - fifo_head;
  return fifo_tail + FIFO_SIZE - fifo_head;
}

// Returns the number of bytes currently available in the fifo
int fifo_byte_available() {
  return FIFO_SIZE - 1 - fifo_byte_length();
}

// Returns true if the fifo is empty
int fifo_empty() {
  return fifo_head == fifo_tail;
}

// Return true if the fifo is full
int fifo_full() {
  return fifo_head == ((fifo_tail + 1) % FIFO_SIZE);
}

// Enqueue 1 byte in the fifo if there is space
// returns 1 for sucess and 0 if the fifo was full
int fifo_enqueue(byte b) {
  int new_tail = (fifo_tail + 1) % FIFO_SIZE;
  if (new_tail == fifo_head) return 0; // the fifo is full
  fifo[fifo_tail] = b;
  fifo_tail = new_tail;
  return 1;
}

// Enqueue 1 byte in the fifo without checking for available space
// The caller should have checked that there is enough space
int _fifo_enqueue(byte b) {
  fifo[fifo_tail] = b;
  fifo_tail = (fifo_tail + 1) % FIFO_SIZE;
}

// Dequeue 1 byte in the fifo.
// The caller should check that the fifo is not empty
byte fifo_dequeue() {
  if (!fifo_empty()) {
    byte result = fifo[fifo_head];
    fifo_head = (fifo_head + 1) % FIFO_SIZE;
    return result;
  }
  return 0;
}

/*
void _fifo_enqueue_ptr(void * ptr) {
  int i;
  ptr_union_t proxy;
  proxy.pointer = ptr;
  for (i = 0; i<PTR_MAX_SIZE; i++) _fifo_enqueue(proxy.buffer[i]);
}

void * _fifo_dequeue_ptr() {
  int i;
  ptr_union_t proxy;
  for (i = 0; i<PTR_MAX_SIZE; i++) proxy.buffer[i] = _fifo_dequeue();
  return proxy.pointer;
}
*/
//Declaration of instance variables
struct ArduinoScheduler_Instance MainMCCfg_A_var;
struct IMUController_Instance MainMCCfg_C_var;
struct Bridge_Instance MainMCCfg_B_var;

// Enqueue of messages IMUController::Serial1::Measure
void enqueue_IMUController_send_Serial1_Measure(struct IMUController_Instance *_instance, float m){
if ( fifo_byte_available() > 8 ) {

_fifo_enqueue( (1 >> 8) & 0xFF );
_fifo_enqueue( 1 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter m
_fifo_enqueue((m>>24) & 0xFF);
_fifo_enqueue((m>>16) & 0xFF);
_fifo_enqueue((m>>8) & 0xFF);
_fifo_enqueue(m & 0xFF);
}
}
// Enqueue of messages ArduinoScheduler::arduino::ready
void enqueue_ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (2 >> 8) & 0xFF );
_fifo_enqueue( 2 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages ArduinoScheduler::arduino::usb_rx_char
void enqueue_ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if ( fifo_byte_available() > 5 ) {

_fifo_enqueue( (3 >> 8) & 0xFF );
_fifo_enqueue( 3 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter c
_fifo_enqueue(c & 0xFF);
}
}
// Enqueue of messages ArduinoScheduler::arduino::100ms_interrupt
void enqueue_ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (4 >> 8) & 0xFF );
_fifo_enqueue( 4 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages ArduinoScheduler::arduino::readDigitalResponse
void enqueue_ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState){
if ( fifo_byte_available() > 6 ) {

_fifo_enqueue( (5 >> 8) & 0xFF );
_fifo_enqueue( 5 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter pin
_fifo_enqueue(pin & 0xFF);

// parameter DigitalState
_fifo_enqueue(DigitalState & 0xFF);
}
}
// Enqueue of messages ArduinoScheduler::arduino::readAnalogResponse
void enqueue_ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res){
if ( fifo_byte_available() > 7 ) {

_fifo_enqueue( (6 >> 8) & 0xFF );
_fifo_enqueue( 6 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter pin
_fifo_enqueue(pin & 0xFF);

// parameter res
_fifo_enqueue((res>>8) & 0xFF);
_fifo_enqueue(res & 0xFF);
}
}
// Enqueue of messages ArduinoScheduler::arduino::1s_poll
void enqueue_ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (7 >> 8) & 0xFF );
_fifo_enqueue( 7 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages ArduinoScheduler::arduino::timeout
void enqueue_ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id){
if ( fifo_byte_available() > 5 ) {

_fifo_enqueue( (8 >> 8) & 0xFF );
_fifo_enqueue( 8 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter id
_fifo_enqueue(id & 0xFF);
}
}
// Enqueue of messages ArduinoScheduler::arduino::4ms_interrupt
void enqueue_ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (9 >> 8) & 0xFF );
_fifo_enqueue( 9 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages ArduinoScheduler::arduino::serial_rx_char
void enqueue_ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if ( fifo_byte_available() > 5 ) {

_fifo_enqueue( (10 >> 8) & 0xFF );
_fifo_enqueue( 10 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter c
_fifo_enqueue(c & 0xFF);
}
}
// Enqueue of messages Bridge::Serial1::CommandStart
void enqueue_Bridge_send_Serial1_CommandStart(struct Bridge_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (11 >> 8) & 0xFF );
_fifo_enqueue( 11 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages Bridge::Serial1::CommandStop
void enqueue_Bridge_send_Serial1_CommandStop(struct Bridge_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (12 >> 8) & 0xFF );
_fifo_enqueue( 12 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}

// Dispatch for messages IMUController::arduino::setOutput
void dispatch_IMUController_send_arduino_setOutput(struct IMUController_Instance *_instance, uint8_t pin){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_setOutput(&MainMCCfg_A_var, pin);
}
}
// Dispatch for messages IMUController::arduino::timer_cancel
void dispatch_IMUController_send_arduino_timer_cancel(struct IMUController_Instance *_instance, uint8_t id){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_timer_cancel(&MainMCCfg_A_var, id);
}
}
// Dispatch for messages IMUController::arduino::setDigitalLow
void dispatch_IMUController_send_arduino_setDigitalLow(struct IMUController_Instance *_instance, uint8_t pin){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_setDigitalLow(&MainMCCfg_A_var, pin);
}
}
// Dispatch for messages IMUController::arduino::serial_print_str
void dispatch_IMUController_send_arduino_serial_print_str(struct IMUController_Instance *_instance, char * msg){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_serial_print_str(&MainMCCfg_A_var, msg);
}
}
// Dispatch for messages IMUController::arduino::timer_start
void dispatch_IMUController_send_arduino_timer_start(struct IMUController_Instance *_instance, uint8_t id, int16_t time){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_timer_start(&MainMCCfg_A_var, id, time);
}
}
// Dispatch for messages IMUController::arduino::serial_print_dec
void dispatch_IMUController_send_arduino_serial_print_dec(struct IMUController_Instance *_instance, double num){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_serial_print_dec(&MainMCCfg_A_var, num);
}
}
// Dispatch for messages IMUController::arduino::readAnalog
void dispatch_IMUController_send_arduino_readAnalog(struct IMUController_Instance *_instance, uint8_t pin){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_readAnalog(&MainMCCfg_A_var, pin);
}
}
// Dispatch for messages IMUController::arduino::usb_print_str
void dispatch_IMUController_send_arduino_usb_print_str(struct IMUController_Instance *_instance, char * msg){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_usb_print_str(&MainMCCfg_A_var, msg);
}
}
// Dispatch for messages IMUController::arduino::serial_print_num
void dispatch_IMUController_send_arduino_serial_print_num(struct IMUController_Instance *_instance, int16_t num){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_serial_print_num(&MainMCCfg_A_var, num);
}
}
// Dispatch for messages IMUController::arduino::usb_print_num
void dispatch_IMUController_send_arduino_usb_print_num(struct IMUController_Instance *_instance, int16_t num){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_usb_print_num(&MainMCCfg_A_var, num);
}
}
// Dispatch for messages IMUController::arduino::setInput
void dispatch_IMUController_send_arduino_setInput(struct IMUController_Instance *_instance, uint8_t pin){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_setInput(&MainMCCfg_A_var, pin);
}
}
// Dispatch for messages IMUController::arduino::setDigitalHigh
void dispatch_IMUController_send_arduino_setDigitalHigh(struct IMUController_Instance *_instance, uint8_t pin){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_setDigitalHigh(&MainMCCfg_A_var, pin);
}
}
// Dispatch for messages IMUController::arduino::usb_print_dec
void dispatch_IMUController_send_arduino_usb_print_dec(struct IMUController_Instance *_instance, double num){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_usb_print_dec(&MainMCCfg_A_var, num);
}
}
// Dispatch for messages IMUController::arduino::readDigital
void dispatch_IMUController_send_arduino_readDigital(struct IMUController_Instance *_instance, uint8_t pin){
if (_instance == &MainMCCfg_C_var) {
ArduinoScheduler_handle_arduino_readDigital(&MainMCCfg_A_var, pin);
}
}
// Dispatch for messages IMUController::Serial1::Measure
void dispatch_IMUController_send_Serial1_Measure(struct IMUController_Instance *_instance, float m){
if (_instance == &MainMCCfg_C_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::ready
void dispatch_ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance){
if (_instance == &MainMCCfg_A_var) {
IMUController_handle_arduino_ready(&MainMCCfg_C_var);
}
}
// Dispatch for messages ArduinoScheduler::arduino::usb_rx_char
void dispatch_ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (_instance == &MainMCCfg_A_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::100ms_interrupt
void dispatch_ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (_instance == &MainMCCfg_A_var) {
IMUController_handle_arduino_100ms_interrupt(&MainMCCfg_C_var);
}
}
// Dispatch for messages ArduinoScheduler::arduino::readDigitalResponse
void dispatch_ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState){
if (_instance == &MainMCCfg_A_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::readAnalogResponse
void dispatch_ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res){
if (_instance == &MainMCCfg_A_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::1s_poll
void dispatch_ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance){
if (_instance == &MainMCCfg_A_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::timeout
void dispatch_ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id){
if (_instance == &MainMCCfg_A_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::4ms_interrupt
void dispatch_ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (_instance == &MainMCCfg_A_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::serial_rx_char
void dispatch_ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (_instance == &MainMCCfg_A_var) {
}
}
// Dispatch for messages Bridge::Serial1::CommandStart
void dispatch_Bridge_send_Serial1_CommandStart(struct Bridge_Instance *_instance){
if (_instance == &MainMCCfg_B_var) {
IMUController_handle_Serial1_CommandStart(&MainMCCfg_C_var);
}
}
// Dispatch for messages Bridge::Serial1::CommandStop
void dispatch_Bridge_send_Serial1_CommandStop(struct Bridge_Instance *_instance){
if (_instance == &MainMCCfg_B_var) {
IMUController_handle_Serial1_CommandStop(&MainMCCfg_C_var);
}
}

void processMessageQueue() {
if (fifo_empty()) return; // return if there is nothing to do

byte mbuf[6];
uint8_t mbufi = 0;

// Read the code of the next port/message in the queue
uint16_t code = fifo_dequeue() << 8;

code += fifo_dequeue();

// Switch to call the appropriate handler
switch(code) {
case 2:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_ready((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 3:
while (mbufi < 3) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_usb_rx_char((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* c */ );
break;
case 4:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_100ms_interrupt((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 5:
while (mbufi < 4) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_readDigitalResponse((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* pin */ ,
mbuf[3] /* DigitalState */ );
break;
case 6:
while (mbufi < 5) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_readAnalogResponse((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* pin */ ,
(mbuf[3]<<8) + mbuf[4] /* res */ );
break;
case 7:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_1s_poll((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 8:
while (mbufi < 3) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_timeout((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* id */ );
break;
case 9:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_4ms_interrupt((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 10:
while (mbufi < 3) mbuf[mbufi++] = fifo_dequeue();
dispatch_ArduinoScheduler_send_arduino_serial_rx_char((struct ArduinoScheduler_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* c */ );
break;
case 1:
while (mbufi < 6) mbuf[mbufi++] = fifo_dequeue();
dispatch_IMUController_send_Serial1_Measure((struct IMUController_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
(mbuf[2]<<24) + (mbuf[3]<<16) + (mbuf[4]<<8) + mbuf[5] /* m */ );
break;
case 11:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_Bridge_send_Serial1_CommandStart((struct Bridge_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 12:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_Bridge_send_Serial1_CommandStop((struct Bridge_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
}
}

void initialize_configuration_MainMCCfg() {
// Initialize connectors
register_ArduinoScheduler_send_arduino_ready_listener(enqueue_ArduinoScheduler_send_arduino_ready);
register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(enqueue_ArduinoScheduler_send_arduino_4ms_interrupt);
register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(enqueue_ArduinoScheduler_send_arduino_100ms_interrupt);
register_ArduinoScheduler_send_arduino_1s_poll_listener(enqueue_ArduinoScheduler_send_arduino_1s_poll);
register_ArduinoScheduler_send_arduino_timeout_listener(enqueue_ArduinoScheduler_send_arduino_timeout);
register_ArduinoScheduler_send_arduino_serial_rx_char_listener(enqueue_ArduinoScheduler_send_arduino_serial_rx_char);
register_ArduinoScheduler_send_arduino_usb_rx_char_listener(enqueue_ArduinoScheduler_send_arduino_usb_rx_char);
register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(enqueue_ArduinoScheduler_send_arduino_readDigitalResponse);
register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(enqueue_ArduinoScheduler_send_arduino_readAnalogResponse);
register_IMUController_send_arduino_timer_start_listener(dispatch_IMUController_send_arduino_timer_start);
register_IMUController_send_arduino_timer_cancel_listener(dispatch_IMUController_send_arduino_timer_cancel);
register_IMUController_send_arduino_serial_print_str_listener(dispatch_IMUController_send_arduino_serial_print_str);
register_IMUController_send_arduino_serial_print_dec_listener(dispatch_IMUController_send_arduino_serial_print_dec);
register_IMUController_send_arduino_serial_print_num_listener(dispatch_IMUController_send_arduino_serial_print_num);
register_IMUController_send_arduino_usb_print_str_listener(dispatch_IMUController_send_arduino_usb_print_str);
register_IMUController_send_arduino_usb_print_dec_listener(dispatch_IMUController_send_arduino_usb_print_dec);
register_IMUController_send_arduino_usb_print_num_listener(dispatch_IMUController_send_arduino_usb_print_num);
register_IMUController_send_arduino_setDigitalHigh_listener(dispatch_IMUController_send_arduino_setDigitalHigh);
register_IMUController_send_arduino_setDigitalLow_listener(dispatch_IMUController_send_arduino_setDigitalLow);
register_IMUController_send_arduino_setOutput_listener(dispatch_IMUController_send_arduino_setOutput);
register_IMUController_send_arduino_setInput_listener(dispatch_IMUController_send_arduino_setInput);
register_IMUController_send_arduino_readDigital_listener(dispatch_IMUController_send_arduino_readDigital);
register_IMUController_send_arduino_readAnalog_listener(dispatch_IMUController_send_arduino_readAnalog);
register_IMUController_send_Serial1_Measure_listener(enqueue_IMUController_send_Serial1_Measure);
register_Bridge_send_Serial1_CommandStop_listener(enqueue_Bridge_send_Serial1_CommandStop);
register_Bridge_send_Serial1_CommandStart_listener(enqueue_Bridge_send_Serial1_CommandStart);

// Init the ID, state variables and properties for instance MainMCCfg_A
MainMCCfg_A_var.id = add_instance( (void*) &MainMCCfg_A_var);
MainMCCfg_A_var.ArduinoScheduler_ArduinoSchedulerStateChart_State = ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE;
MainMCCfg_A_var.ArduinoScheduler_interrupt_counter__var = 0;

// Init the ID, state variables and properties for instance MainMCCfg_B
MainMCCfg_B_var.id = add_instance( (void*) &MainMCCfg_B_var);
MainMCCfg_B_var.Bridge_BridgeChart_State = BRIDGE_BRIDGECHART_INIT_STATE;

// Init the ID, state variables and properties for instance MainMCCfg_C
MainMCCfg_C_var.id = add_instance( (void*) &MainMCCfg_C_var);
MainMCCfg_C_var.IMUController_IMUCCrt_State = IMUCONTROLLER_IMUCCRT_INIT_STATE;
MainMCCfg_C_var.IMUController_led1__var = 7;
MainMCCfg_C_var.IMUController_led2__var = 8;
MainMCCfg_C_var.IMUController_IMU__var = 3;
MainMCCfg_C_var.IMUController_led1On__var = 0;

IMUController_IMUCCrt_OnEntry(IMUCONTROLLER_IMUCCRT_STATE, &MainMCCfg_C_var);
Bridge_BridgeChart_OnEntry(BRIDGE_BRIDGECHART_STATE, &MainMCCfg_B_var);
ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE, &MainMCCfg_A_var);
}

/*****************************************************************************
 * Main for configuration : MainMCCfg
 *****************************************************************************/

void setup() {
initialize_configuration_MainMCCfg();
ArduinoScheduler_handle_polling_setup(&MainMCCfg_A_var);

}

void loop() {
ArduinoScheduler_handle_polling_poll(&MainMCCfg_A_var);
IMUController_handle_empty_event(&MainMCCfg_C_var);

processMessageQueue();
}