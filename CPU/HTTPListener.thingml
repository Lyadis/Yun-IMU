import "Bridge.thingml"

thing HTTPListener includes BridgeClient {
	statechart HTTPListenerCrt init Init {
		state Init {
			transition -> Loop event bridge?CPUBridgeReady
		}
		
		state Loop {
			on entry do
				print "[HTTPListener] Start\n"
				bridge!CommandStart()
			end
		}
	}
}

thing HTTPServer includes BridgeClient 
@c_header "
#include \"../../../lib/microhttpd/platform.h\"
#include \"../../../lib/microhttpd/microhttpd.h\"

#define PAGE \"<html><head><title>libmicrohttpd demo</title></head><body>Query string for &quot;%s&quot; was &quot;%s&quot;</body></html>\"

"
@c_global "
struct HTTPServer_Instance *_HTTPServer_Instance;
"
{
	function ahc_echo()
	@c_prototype "static int ahc_echo (void *cls, struct MHD_Connection *connection, const char *url, const char *method, const char *version, const char *upload_data, size_t *upload_data_size, void **ptr)"
	@c_instance_var_name "_HTTPServer_Instance"
	 do
		'
          
		  static int aptr;
		  const char *fmt = cls;
		  const char *val;
		  char *me;
		  struct MHD_Response *response;
		  int ret;
		
		  if (0 != strcmp (method, "GET"))
		    return MHD_NO;              /* unexpected method */
		  if (&aptr != *ptr)
		    {
		      /* do never respond on first call */
		      *ptr = &aptr;
		      return MHD_YES;
		    }
		  *ptr = NULL;                  /* reset when done */
		  val = MHD_lookup_connection_value (connection, MHD_GET_ARGUMENT_KIND, "q");
		
		  if(strcmp(val, "START") == 0) {
		    printf("START\n");
		    'bridge!CommandStart()'
		  } else if (strcmp(val, "STOP") == 0) {
		    printf("STOP\n");
		    'bridge!CommandStop()'
		  }
		
		  me = malloc (snprintf (NULL, 0, fmt, "q", val) + 1);
		  if (me == NULL)
		    return MHD_NO;
		  sprintf (me, fmt, "q", val);
		  response = MHD_create_response_from_buffer (strlen (me), me,
							      MHD_RESPMEM_MUST_FREE);
		  if (response == NULL)
		    {
		      free (me);
		      return MHD_NO;
		    }
		  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);
		  MHD_destroy_response (response);
		  '
		  return 'ret'
		
		
	end
	
	function start_httpd(Port : UInt16)
	@fork_linux_thread "true"
	 do
		'struct MHD_Daemon *d;
				_HTTPServer_Instance = _instance;

				  
				  d = MHD_start_daemon (MHD_USE_THREAD_PER_CONNECTION | MHD_USE_DEBUG,
				                        '&Port&',
				                        NULL, NULL, &ahc_echo, PAGE, MHD_OPTION_END);
				  if (d == NULL)
				    return 1;
				  (void) getc (stdin);
				  MHD_stop_daemon (d);'
			
	end
	
	property serverPort : UInt16 = 50999
	
	statechart ServerChart init Init {
		state Init {
			on entry do
				print "[HTTPServer] Starting\n"
				start_httpd(serverPort)
				print "[HTTPServer] Started\n"
			end
		}
	}
}